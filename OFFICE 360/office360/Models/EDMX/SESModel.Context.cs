//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace office360.Models.EDMX
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SESEntities : DbContext
    {
        public SESEntities()
            : base("name=SESEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AccFeeStructure> AccFeeStructure { get; set; }
        public virtual DbSet<AccFeeStructureDetail> AccFeeStructureDetail { get; set; }
        public virtual DbSet<AppClass> AppClass { get; set; }
        public virtual DbSet<AppSession> AppSession { get; set; }
        public virtual DbSet<AppSessionDetail> AppSessionDetail { get; set; }
        public virtual DbSet<GeneralBranch> GeneralBranch { get; set; }
        public virtual DbSet<GeneralBranchSetting> GeneralBranchSetting { get; set; }
        public virtual DbSet<GeneralCompany> GeneralCompany { get; set; }
        public virtual DbSet<GeneralEmailSetting> GeneralEmailSetting { get; set; }
        public virtual DbSet<GeneralRightSetting> GeneralRightSetting { get; set; }
        public virtual DbSet<GeneralUser> GeneralUser { get; set; }
        public virtual DbSet<GeneralUserRight> GeneralUserRight { get; set; }
        public virtual DbSet<StructureCOAAccount> StructureCOAAccount { get; set; }
        public virtual DbSet<StructureDiscountType> StructureDiscountType { get; set; }
        public virtual DbSet<StructureFeeType> StructureFeeType { get; set; }
        public virtual DbSet<AdmissionCatagory> AdmissionCatagory { get; set; }
        public virtual DbSet<BillingMethod> BillingMethod { get; set; }
        public virtual DbSet<CampusType> CampusType { get; set; }
        public virtual DbSet<ChallanMethod> ChallanMethod { get; set; }
        public virtual DbSet<ChargingMethod> ChargingMethod { get; set; }
        public virtual DbSet<City> City { get; set; }
        public virtual DbSet<CoaCatagory> CoaCatagory { get; set; }
        public virtual DbSet<CoaType> CoaType { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<DocType> DocType { get; set; }
        public virtual DbSet<DocumentStatus> DocumentStatus { get; set; }
        public virtual DbSet<EducationBoard> EducationBoard { get; set; }
        public virtual DbSet<EnrollmentType> EnrollmentType { get; set; }
        public virtual DbSet<FeeCatagory> FeeCatagory { get; set; }
        public virtual DbSet<Gender> Gender { get; set; }
        public virtual DbSet<MartialStatus> MartialStatus { get; set; }
        public virtual DbSet<Occupation> Occupation { get; set; }
        public virtual DbSet<OrganizationType> OrganizationType { get; set; }
        public virtual DbSet<PolicyPeriod> PolicyPeriod { get; set; }
        public virtual DbSet<RegistrationType> RegistrationType { get; set; }
        public virtual DbSet<Relationship> Relationship { get; set; }
        public virtual DbSet<Religion> Religion { get; set; }
        public virtual DbSet<Right> Right { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<RollCallSystem> RollCallSystem { get; set; }
        public virtual DbSet<StudyGroup> StudyGroup { get; set; }
        public virtual DbSet<StudyLevel> StudyLevel { get; set; }
        public virtual DbSet<URLType> URLType { get; set; }
        public virtual DbSet<WHTaxPolicy> WHTaxPolicy { get; set; }
        public virtual DbSet<WorkingShift> WorkingShift { get; set; }
    
        [DbFunction("SESEntities", "fn_CodeSplitByCommaAsINT")]
        public virtual IQueryable<fn_CodeSplitByCommaAsINT_Result> fn_CodeSplitByCommaAsINT(string psCSString)
        {
            var psCSStringParameter = psCSString != null ?
                new ObjectParameter("psCSString", psCSString) :
                new ObjectParameter("psCSString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_CodeSplitByCommaAsINT_Result>("[SESEntities].[fn_CodeSplitByCommaAsINT](@psCSString)", psCSStringParameter);
        }
    
        [DbFunction("SESEntities", "fn_CodeSplitByCommaAsUniqueIdentifier")]
        public virtual IQueryable<fn_CodeSplitByCommaAsUniqueIdentifier_Result> fn_CodeSplitByCommaAsUniqueIdentifier(string psCSString)
        {
            var psCSStringParameter = psCSString != null ?
                new ObjectParameter("psCSString", psCSString) :
                new ObjectParameter("psCSString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_CodeSplitByCommaAsUniqueIdentifier_Result>("[SESEntities].[fn_CodeSplitByCommaAsUniqueIdentifier](@psCSString)", psCSStringParameter);
        }
    
        [DbFunction("SESEntities", "fn_GetCommaSepratedValuesInList")]
        public virtual IQueryable<fn_GetCommaSepratedValuesInList_Result> fn_GetCommaSepratedValuesInList(string psCSString)
        {
            var psCSStringParameter = psCSString != null ?
                new ObjectParameter("psCSString", psCSString) :
                new ObjectParameter("psCSString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_GetCommaSepratedValuesInList_Result>("[SESEntities].[fn_GetCommaSepratedValuesInList](@psCSString)", psCSStringParameter);
        }
    
        public virtual ObjectResult<AccFeeStructure_GetListByParam_Result> AccFeeStructure_GetListByParam(string dB_IF_PARAM, Nullable<int> companyId, Nullable<int> campusId, Nullable<int> sessionId, Nullable<int> classId)
        {
            var dB_IF_PARAMParameter = dB_IF_PARAM != null ?
                new ObjectParameter("DB_IF_PARAM", dB_IF_PARAM) :
                new ObjectParameter("DB_IF_PARAM", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var campusIdParameter = campusId.HasValue ?
                new ObjectParameter("CampusId", campusId) :
                new ObjectParameter("CampusId", typeof(int));
    
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("SessionId", sessionId) :
                new ObjectParameter("SessionId", typeof(int));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccFeeStructure_GetListByParam_Result>("AccFeeStructure_GetListByParam", dB_IF_PARAMParameter, companyIdParameter, campusIdParameter, sessionIdParameter, classIdParameter);
        }
    
        public virtual ObjectResult<AccFeeStructure_GetListBySearch_Result> AccFeeStructure_GetListBySearch(Nullable<int> companyId, Nullable<int> branchId, Nullable<int> inputTypeId, string inputText)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var inputTypeIdParameter = inputTypeId.HasValue ?
                new ObjectParameter("InputTypeId", inputTypeId) :
                new ObjectParameter("InputTypeId", typeof(int));
    
            var inputTextParameter = inputText != null ?
                new ObjectParameter("InputText", inputText) :
                new ObjectParameter("InputText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccFeeStructure_GetListBySearch_Result>("AccFeeStructure_GetListBySearch", companyIdParameter, branchIdParameter, inputTypeIdParameter, inputTextParameter);
        }
    
        public virtual ObjectResult<AccFeeStructureDetail_GetListByParam_Result> AccFeeStructureDetail_GetListByParam(string dB_IF_PARAM, Nullable<int> companyId, Nullable<int> campusId, Nullable<int> feeStructureId, Nullable<int> sessionId, Nullable<int> classId)
        {
            var dB_IF_PARAMParameter = dB_IF_PARAM != null ?
                new ObjectParameter("DB_IF_PARAM", dB_IF_PARAM) :
                new ObjectParameter("DB_IF_PARAM", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var campusIdParameter = campusId.HasValue ?
                new ObjectParameter("CampusId", campusId) :
                new ObjectParameter("CampusId", typeof(int));
    
            var feeStructureIdParameter = feeStructureId.HasValue ?
                new ObjectParameter("FeeStructureId", feeStructureId) :
                new ObjectParameter("FeeStructureId", typeof(int));
    
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("SessionId", sessionId) :
                new ObjectParameter("SessionId", typeof(int));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccFeeStructureDetail_GetListByParam_Result>("AccFeeStructureDetail_GetListByParam", dB_IF_PARAMParameter, companyIdParameter, campusIdParameter, feeStructureIdParameter, sessionIdParameter, classIdParameter);
        }
    
        public virtual ObjectResult<AppClass_GetListByParam_Result> AppClass_GetListByParam(string dB_IF_PARAM, Nullable<int> companyId, Nullable<int> branchId, Nullable<int> appSessionId, string classIds, Nullable<int> campusId)
        {
            var dB_IF_PARAMParameter = dB_IF_PARAM != null ?
                new ObjectParameter("DB_IF_PARAM", dB_IF_PARAM) :
                new ObjectParameter("DB_IF_PARAM", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var appSessionIdParameter = appSessionId.HasValue ?
                new ObjectParameter("AppSessionId", appSessionId) :
                new ObjectParameter("AppSessionId", typeof(int));
    
            var classIdsParameter = classIds != null ?
                new ObjectParameter("ClassIds", classIds) :
                new ObjectParameter("ClassIds", typeof(string));
    
            var campusIdParameter = campusId.HasValue ?
                new ObjectParameter("CampusId", campusId) :
                new ObjectParameter("CampusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AppClass_GetListByParam_Result>("AppClass_GetListByParam", dB_IF_PARAMParameter, companyIdParameter, branchIdParameter, appSessionIdParameter, classIdsParameter, campusIdParameter);
        }
    
        public virtual int AppClass_UpSert(string dB_OperationType, Nullable<System.Guid> guID, Nullable<int> campusId, string description, Nullable<int> studyLevelId, Nullable<int> studyGroupId, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, Nullable<System.DateTime> updatedOn, Nullable<int> updatedBy, Nullable<int> docType, Nullable<int> documentStatus, Nullable<bool> status, Nullable<int> branchId, Nullable<int> companyId, ObjectParameter response)
        {
            var dB_OperationTypeParameter = dB_OperationType != null ?
                new ObjectParameter("DB_OperationType", dB_OperationType) :
                new ObjectParameter("DB_OperationType", typeof(string));
    
            var guIDParameter = guID.HasValue ?
                new ObjectParameter("GuID", guID) :
                new ObjectParameter("GuID", typeof(System.Guid));
    
            var campusIdParameter = campusId.HasValue ?
                new ObjectParameter("CampusId", campusId) :
                new ObjectParameter("CampusId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var studyLevelIdParameter = studyLevelId.HasValue ?
                new ObjectParameter("StudyLevelId", studyLevelId) :
                new ObjectParameter("StudyLevelId", typeof(int));
    
            var studyGroupIdParameter = studyGroupId.HasValue ?
                new ObjectParameter("StudyGroupId", studyGroupId) :
                new ObjectParameter("StudyGroupId", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var docTypeParameter = docType.HasValue ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(int));
    
            var documentStatusParameter = documentStatus.HasValue ?
                new ObjectParameter("DocumentStatus", documentStatus) :
                new ObjectParameter("DocumentStatus", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AppClass_UpSert", dB_OperationTypeParameter, guIDParameter, campusIdParameter, descriptionParameter, studyLevelIdParameter, studyGroupIdParameter, createdOnParameter, createdByParameter, updatedOnParameter, updatedByParameter, docTypeParameter, documentStatusParameter, statusParameter, branchIdParameter, companyIdParameter, response);
        }
    
        public virtual int AppClassRegistration_Insert(Nullable<int> sessionId, Nullable<int> studentId, Nullable<int> classId, Nullable<int> documentStatus, Nullable<int> docType, Nullable<int> createdBy, Nullable<int> branchId, Nullable<int> companyId, ObjectParameter response)
        {
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("SessionId", sessionId) :
                new ObjectParameter("SessionId", typeof(int));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var documentStatusParameter = documentStatus.HasValue ?
                new ObjectParameter("DocumentStatus", documentStatus) :
                new ObjectParameter("DocumentStatus", typeof(int));
    
            var docTypeParameter = docType.HasValue ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AppClassRegistration_Insert", sessionIdParameter, studentIdParameter, classIdParameter, documentStatusParameter, docTypeParameter, createdByParameter, branchIdParameter, companyIdParameter, response);
        }
    
        public virtual ObjectResult<AppSession_GetListByParam_Result> AppSession_GetListByParam(string dB_IF_PARAM, Nullable<int> companyId, Nullable<int> branchId, Nullable<int> campusId)
        {
            var dB_IF_PARAMParameter = dB_IF_PARAM != null ?
                new ObjectParameter("DB_IF_PARAM", dB_IF_PARAM) :
                new ObjectParameter("DB_IF_PARAM", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var campusIdParameter = campusId.HasValue ?
                new ObjectParameter("CampusId", campusId) :
                new ObjectParameter("CampusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AppSession_GetListByParam_Result>("AppSession_GetListByParam", dB_IF_PARAMParameter, companyIdParameter, branchIdParameter, campusIdParameter);
        }
    
        public virtual int AppSession_UpSert(string dB_OperationType, Nullable<System.Guid> guID, string description, Nullable<int> campusId, Nullable<System.DateTime> sessionStartOn, Nullable<System.DateTime> sessionEndOn, Nullable<int> enrollmentTypeId, string classIds, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, Nullable<System.DateTime> updatedOn, Nullable<int> updatedBy, Nullable<int> docType, Nullable<int> documentStatus, Nullable<bool> status, Nullable<int> branchId, Nullable<int> companyId, ObjectParameter response)
        {
            var dB_OperationTypeParameter = dB_OperationType != null ?
                new ObjectParameter("DB_OperationType", dB_OperationType) :
                new ObjectParameter("DB_OperationType", typeof(string));
    
            var guIDParameter = guID.HasValue ?
                new ObjectParameter("GuID", guID) :
                new ObjectParameter("GuID", typeof(System.Guid));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var campusIdParameter = campusId.HasValue ?
                new ObjectParameter("CampusId", campusId) :
                new ObjectParameter("CampusId", typeof(int));
    
            var sessionStartOnParameter = sessionStartOn.HasValue ?
                new ObjectParameter("SessionStartOn", sessionStartOn) :
                new ObjectParameter("SessionStartOn", typeof(System.DateTime));
    
            var sessionEndOnParameter = sessionEndOn.HasValue ?
                new ObjectParameter("SessionEndOn", sessionEndOn) :
                new ObjectParameter("SessionEndOn", typeof(System.DateTime));
    
            var enrollmentTypeIdParameter = enrollmentTypeId.HasValue ?
                new ObjectParameter("EnrollmentTypeId", enrollmentTypeId) :
                new ObjectParameter("EnrollmentTypeId", typeof(int));
    
            var classIdsParameter = classIds != null ?
                new ObjectParameter("ClassIds", classIds) :
                new ObjectParameter("ClassIds", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var docTypeParameter = docType.HasValue ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(int));
    
            var documentStatusParameter = documentStatus.HasValue ?
                new ObjectParameter("DocumentStatus", documentStatus) :
                new ObjectParameter("DocumentStatus", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AppSession_UpSert", dB_OperationTypeParameter, guIDParameter, descriptionParameter, campusIdParameter, sessionStartOnParameter, sessionEndOnParameter, enrollmentTypeIdParameter, classIdsParameter, createdOnParameter, createdByParameter, updatedOnParameter, updatedByParameter, docTypeParameter, documentStatusParameter, statusParameter, branchIdParameter, companyIdParameter, response);
        }
    
        public virtual ObjectResult<AppSessionDetail_GetListByParam_Result> AppSessionDetail_GetListByParam(Nullable<int> appSessionId)
        {
            var appSessionIdParameter = appSessionId.HasValue ?
                new ObjectParameter("AppSessionId", appSessionId) :
                new ObjectParameter("AppSessionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AppSessionDetail_GetListByParam_Result>("AppSessionDetail_GetListByParam", appSessionIdParameter);
        }
    
        public virtual int AppSessionDetail_UpSert(string dB_OperationType, Nullable<System.Guid> guID, Nullable<int> appSessionId, string description, Nullable<System.DateTime> periodStartOn, Nullable<System.DateTime> periodEndOn, Nullable<bool> status, ObjectParameter response)
        {
            var dB_OperationTypeParameter = dB_OperationType != null ?
                new ObjectParameter("DB_OperationType", dB_OperationType) :
                new ObjectParameter("DB_OperationType", typeof(string));
    
            var guIDParameter = guID.HasValue ?
                new ObjectParameter("GuID", guID) :
                new ObjectParameter("GuID", typeof(System.Guid));
    
            var appSessionIdParameter = appSessionId.HasValue ?
                new ObjectParameter("AppSessionId", appSessionId) :
                new ObjectParameter("AppSessionId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var periodStartOnParameter = periodStartOn.HasValue ?
                new ObjectParameter("PeriodStartOn", periodStartOn) :
                new ObjectParameter("PeriodStartOn", typeof(System.DateTime));
    
            var periodEndOnParameter = periodEndOn.HasValue ?
                new ObjectParameter("PeriodEndOn", periodEndOn) :
                new ObjectParameter("PeriodEndOn", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AppSessionDetail_UpSert", dB_OperationTypeParameter, guIDParameter, appSessionIdParameter, descriptionParameter, periodStartOnParameter, periodEndOnParameter, statusParameter, response);
        }
    
        public virtual int BULKOperation_AppSessionDetail(string dB_OperationType, ObjectParameter responseParameter)
        {
            var dB_OperationTypeParameter = dB_OperationType != null ?
                new ObjectParameter("DB_OperationType", dB_OperationType) :
                new ObjectParameter("DB_OperationType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BULKOperation_AppSessionDetail", dB_OperationTypeParameter, responseParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DEV_CheckDuplicateRecord(string tableName, string selectColumns, string whereClause)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var selectColumnsParameter = selectColumns != null ?
                new ObjectParameter("SelectColumns", selectColumns) :
                new ObjectParameter("SelectColumns", typeof(string));
    
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DEV_CheckDuplicateRecord", tableNameParameter, selectColumnsParameter, whereClauseParameter);
        }
    
        public virtual int DEV_InsertHistory(string tableName, string columnNames, string columnValues, ObjectParameter status)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var columnNamesParameter = columnNames != null ?
                new ObjectParameter("ColumnNames", columnNames) :
                new ObjectParameter("ColumnNames", typeof(string));
    
            var columnValuesParameter = columnValues != null ?
                new ObjectParameter("ColumnValues", columnValues) :
                new ObjectParameter("ColumnValues", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DEV_InsertHistory", tableNameParameter, columnNamesParameter, columnValuesParameter, status);
        }
    
        public virtual ObjectResult<Nullable<int>> DEV_UpdateRecord(string tableName, string setClause, string whereClause)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var setClauseParameter = setClause != null ?
                new ObjectParameter("SetClause", setClause) :
                new ObjectParameter("SetClause", typeof(string));
    
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DEV_UpdateRecord", tableNameParameter, setClauseParameter, whereClauseParameter);
        }
    
        public virtual ObjectResult<GeneralBranch_GetListByParam_Result> GeneralBranch_GetListByParam(string dB_IF_PARAM, Nullable<int> companyId, Nullable<int> branchId, string allowedCampusIds, Nullable<int> documentStatusBranch, Nullable<int> documentStatusSession)
        {
            var dB_IF_PARAMParameter = dB_IF_PARAM != null ?
                new ObjectParameter("DB_IF_PARAM", dB_IF_PARAM) :
                new ObjectParameter("DB_IF_PARAM", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var allowedCampusIdsParameter = allowedCampusIds != null ?
                new ObjectParameter("AllowedCampusIds", allowedCampusIds) :
                new ObjectParameter("AllowedCampusIds", typeof(string));
    
            var documentStatusBranchParameter = documentStatusBranch.HasValue ?
                new ObjectParameter("DocumentStatusBranch", documentStatusBranch) :
                new ObjectParameter("DocumentStatusBranch", typeof(int));
    
            var documentStatusSessionParameter = documentStatusSession.HasValue ?
                new ObjectParameter("DocumentStatusSession", documentStatusSession) :
                new ObjectParameter("DocumentStatusSession", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GeneralBranch_GetListByParam_Result>("GeneralBranch_GetListByParam", dB_IF_PARAMParameter, companyIdParameter, branchIdParameter, allowedCampusIdsParameter, documentStatusBranchParameter, documentStatusSessionParameter);
        }
    
        public virtual ObjectResult<GeneralBranch_GetListBySearch_Result> GeneralBranch_GetListBySearch(Nullable<int> companyId, Nullable<int> branchId, Nullable<int> inputTypeId, string inputText)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var inputTypeIdParameter = inputTypeId.HasValue ?
                new ObjectParameter("InputTypeId", inputTypeId) :
                new ObjectParameter("InputTypeId", typeof(int));
    
            var inputTextParameter = inputText != null ?
                new ObjectParameter("InputText", inputText) :
                new ObjectParameter("InputText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GeneralBranch_GetListBySearch_Result>("GeneralBranch_GetListBySearch", companyIdParameter, branchIdParameter, inputTypeIdParameter, inputTextParameter);
        }
    
        public virtual int GeneralBranch_UpSert(string dB_OperationType, Nullable<System.Guid> guID, string description, Nullable<int> campusTypeId, Nullable<int> organizationTypeId, Nullable<int> countryId, Nullable<int> cityId, string address, string contactNo, string emailAddress, string nTNNo, string remarks, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, Nullable<System.DateTime> updatedOn, Nullable<int> updatedBy, Nullable<int> documentStatus, Nullable<int> docType, Nullable<bool> status, Nullable<int> branchId, Nullable<int> companyId, ObjectParameter response, ObjectParameter campusId)
        {
            var dB_OperationTypeParameter = dB_OperationType != null ?
                new ObjectParameter("DB_OperationType", dB_OperationType) :
                new ObjectParameter("DB_OperationType", typeof(string));
    
            var guIDParameter = guID.HasValue ?
                new ObjectParameter("GuID", guID) :
                new ObjectParameter("GuID", typeof(System.Guid));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var campusTypeIdParameter = campusTypeId.HasValue ?
                new ObjectParameter("CampusTypeId", campusTypeId) :
                new ObjectParameter("CampusTypeId", typeof(int));
    
            var organizationTypeIdParameter = organizationTypeId.HasValue ?
                new ObjectParameter("OrganizationTypeId", organizationTypeId) :
                new ObjectParameter("OrganizationTypeId", typeof(int));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var nTNNoParameter = nTNNo != null ?
                new ObjectParameter("NTNNo", nTNNo) :
                new ObjectParameter("NTNNo", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var documentStatusParameter = documentStatus.HasValue ?
                new ObjectParameter("DocumentStatus", documentStatus) :
                new ObjectParameter("DocumentStatus", typeof(int));
    
            var docTypeParameter = docType.HasValue ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GeneralBranch_UpSert", dB_OperationTypeParameter, guIDParameter, descriptionParameter, campusTypeIdParameter, organizationTypeIdParameter, countryIdParameter, cityIdParameter, addressParameter, contactNoParameter, emailAddressParameter, nTNNoParameter, remarksParameter, createdOnParameter, createdByParameter, updatedOnParameter, updatedByParameter, documentStatusParameter, docTypeParameter, statusParameter, branchIdParameter, companyIdParameter, response, campusId);
        }
    
        public virtual int GeneralBranchSetting_UpSert(string dB_OperationType, Nullable<System.Guid> guID, Nullable<int> campusId, Nullable<int> rollCallSystemId, Nullable<int> billingMethodId, string studyLevelIds, string studyGroupIds, Nullable<int> policyPeriodId, Nullable<int> challanMethodId, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, Nullable<System.DateTime> updatedOn, Nullable<int> updatedBy, Nullable<int> docType, Nullable<int> documentStatus, Nullable<bool> status, Nullable<int> branchId, Nullable<int> companyId, ObjectParameter response)
        {
            var dB_OperationTypeParameter = dB_OperationType != null ?
                new ObjectParameter("DB_OperationType", dB_OperationType) :
                new ObjectParameter("DB_OperationType", typeof(string));
    
            var guIDParameter = guID.HasValue ?
                new ObjectParameter("GuID", guID) :
                new ObjectParameter("GuID", typeof(System.Guid));
    
            var campusIdParameter = campusId.HasValue ?
                new ObjectParameter("CampusId", campusId) :
                new ObjectParameter("CampusId", typeof(int));
    
            var rollCallSystemIdParameter = rollCallSystemId.HasValue ?
                new ObjectParameter("RollCallSystemId", rollCallSystemId) :
                new ObjectParameter("RollCallSystemId", typeof(int));
    
            var billingMethodIdParameter = billingMethodId.HasValue ?
                new ObjectParameter("BillingMethodId", billingMethodId) :
                new ObjectParameter("BillingMethodId", typeof(int));
    
            var studyLevelIdsParameter = studyLevelIds != null ?
                new ObjectParameter("StudyLevelIds", studyLevelIds) :
                new ObjectParameter("StudyLevelIds", typeof(string));
    
            var studyGroupIdsParameter = studyGroupIds != null ?
                new ObjectParameter("StudyGroupIds", studyGroupIds) :
                new ObjectParameter("StudyGroupIds", typeof(string));
    
            var policyPeriodIdParameter = policyPeriodId.HasValue ?
                new ObjectParameter("PolicyPeriodId", policyPeriodId) :
                new ObjectParameter("PolicyPeriodId", typeof(int));
    
            var challanMethodIdParameter = challanMethodId.HasValue ?
                new ObjectParameter("ChallanMethodId", challanMethodId) :
                new ObjectParameter("ChallanMethodId", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var docTypeParameter = docType.HasValue ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(int));
    
            var documentStatusParameter = documentStatus.HasValue ?
                new ObjectParameter("DocumentStatus", documentStatus) :
                new ObjectParameter("DocumentStatus", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GeneralBranchSetting_UpSert", dB_OperationTypeParameter, guIDParameter, campusIdParameter, rollCallSystemIdParameter, billingMethodIdParameter, studyLevelIdsParameter, studyGroupIdsParameter, policyPeriodIdParameter, challanMethodIdParameter, createdOnParameter, createdByParameter, updatedOnParameter, updatedByParameter, docTypeParameter, documentStatusParameter, statusParameter, branchIdParameter, companyIdParameter, response);
        }
    
        public virtual ObjectResult<GeneralCompany_GetDetailByParam_Result> GeneralCompany_GetDetailByParam(Nullable<int> id, string listCondition)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var listConditionParameter = listCondition != null ?
                new ObjectParameter("ListCondition", listCondition) :
                new ObjectParameter("ListCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GeneralCompany_GetDetailByParam_Result>("GeneralCompany_GetDetailByParam", idParameter, listConditionParameter);
        }
    
        public virtual ObjectResult<GeneralEmailSetting_GetDetailByParam_Result> GeneralEmailSetting_GetDetailByParam(Nullable<int> companyId, string listCondition, Nullable<int> branchId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var listConditionParameter = listCondition != null ?
                new ObjectParameter("ListCondition", listCondition) :
                new ObjectParameter("ListCondition", typeof(string));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GeneralEmailSetting_GetDetailByParam_Result>("GeneralEmailSetting_GetDetailByParam", companyIdParameter, listConditionParameter, branchIdParameter);
        }
    
        public virtual int GeneralEnrollmentSetting_Insert(Nullable<int> enrollmentTypeId, Nullable<int> branchId, Nullable<int> companyId, Nullable<int> createdBy, Nullable<int> updatedBy, Nullable<System.DateTime> expiredOn)
        {
            var enrollmentTypeIdParameter = enrollmentTypeId.HasValue ?
                new ObjectParameter("EnrollmentTypeId", enrollmentTypeId) :
                new ObjectParameter("EnrollmentTypeId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var expiredOnParameter = expiredOn.HasValue ?
                new ObjectParameter("ExpiredOn", expiredOn) :
                new ObjectParameter("ExpiredOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GeneralEnrollmentSetting_Insert", enrollmentTypeIdParameter, branchIdParameter, companyIdParameter, createdByParameter, updatedByParameter, expiredOnParameter);
        }
    
        public virtual ObjectResult<GeneralRightSetting_GetListByParam_Result> GeneralRightSetting_GetListByParam(string dB_IF_PARAM, string allowedCampusIds, Nullable<int> userId, Nullable<int> companyId, Nullable<int> uRLTypeId, Nullable<bool> status, string menu, Nullable<int> rightId, string rightPath)
        {
            var dB_IF_PARAMParameter = dB_IF_PARAM != null ?
                new ObjectParameter("DB_IF_PARAM", dB_IF_PARAM) :
                new ObjectParameter("DB_IF_PARAM", typeof(string));
    
            var allowedCampusIdsParameter = allowedCampusIds != null ?
                new ObjectParameter("AllowedCampusIds", allowedCampusIds) :
                new ObjectParameter("AllowedCampusIds", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var uRLTypeIdParameter = uRLTypeId.HasValue ?
                new ObjectParameter("URLTypeId", uRLTypeId) :
                new ObjectParameter("URLTypeId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var menuParameter = menu != null ?
                new ObjectParameter("Menu", menu) :
                new ObjectParameter("Menu", typeof(string));
    
            var rightIdParameter = rightId.HasValue ?
                new ObjectParameter("RightId", rightId) :
                new ObjectParameter("RightId", typeof(int));
    
            var rightPathParameter = rightPath != null ?
                new ObjectParameter("RightPath", rightPath) :
                new ObjectParameter("RightPath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GeneralRightSetting_GetListByParam_Result>("GeneralRightSetting_GetListByParam", dB_IF_PARAMParameter, allowedCampusIdsParameter, userIdParameter, companyIdParameter, uRLTypeIdParameter, statusParameter, menuParameter, rightIdParameter, rightPathParameter);
        }
    
        public virtual ObjectResult<GeneralUser_GetDetailByParam_Result> GeneralUser_GetDetailByParam(string listCondition, Nullable<int> companyId, Nullable<bool> isLogIn, string userName, string password, Nullable<int> id)
        {
            var listConditionParameter = listCondition != null ?
                new ObjectParameter("ListCondition", listCondition) :
                new ObjectParameter("ListCondition", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var isLogInParameter = isLogIn.HasValue ?
                new ObjectParameter("IsLogIn", isLogIn) :
                new ObjectParameter("IsLogIn", typeof(bool));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GeneralUser_GetDetailByParam_Result>("GeneralUser_GetDetailByParam", listConditionParameter, companyIdParameter, isLogInParameter, userNameParameter, passwordParameter, idParameter);
        }
    
        public virtual int GeneralUser_Insert(string name, string userName, string password, string emailAddress, string mobileNumber, Nullable<int> roleId, Nullable<bool> isLogIn, string allowedBranchIds, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, Nullable<System.DateTime> updatedOn, Nullable<int> updatedBy, Nullable<int> companyId, Nullable<int> employeeId, Nullable<bool> isDeveloper)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var isLogInParameter = isLogIn.HasValue ?
                new ObjectParameter("IsLogIn", isLogIn) :
                new ObjectParameter("IsLogIn", typeof(bool));
    
            var allowedBranchIdsParameter = allowedBranchIds != null ?
                new ObjectParameter("AllowedBranchIds", allowedBranchIds) :
                new ObjectParameter("AllowedBranchIds", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var isDeveloperParameter = isDeveloper.HasValue ?
                new ObjectParameter("IsDeveloper", isDeveloper) :
                new ObjectParameter("IsDeveloper", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GeneralUser_Insert", nameParameter, userNameParameter, passwordParameter, emailAddressParameter, mobileNumberParameter, roleIdParameter, isLogInParameter, allowedBranchIdsParameter, createdOnParameter, createdByParameter, updatedOnParameter, updatedByParameter, companyIdParameter, employeeIdParameter, isDeveloperParameter);
        }
    
        public virtual ObjectResult<LK_ChallanMethod_GetListByParam_Result> LK_ChallanMethod_GetListByParam(string dB_IF_PARAM, Nullable<int> id)
        {
            var dB_IF_PARAMParameter = dB_IF_PARAM != null ?
                new ObjectParameter("DB_IF_PARAM", dB_IF_PARAM) :
                new ObjectParameter("DB_IF_PARAM", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LK_ChallanMethod_GetListByParam_Result>("LK_ChallanMethod_GetListByParam", dB_IF_PARAMParameter, idParameter);
        }
    
        public virtual ObjectResult<LK_StudyGroup_GetListByParam_Result> LK_StudyGroup_GetListByParam(string dB_IF_PARAM, Nullable<int> companyId, Nullable<int> campusId, string allowedStudyGroupIds)
        {
            var dB_IF_PARAMParameter = dB_IF_PARAM != null ?
                new ObjectParameter("DB_IF_PARAM", dB_IF_PARAM) :
                new ObjectParameter("DB_IF_PARAM", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var campusIdParameter = campusId.HasValue ?
                new ObjectParameter("CampusId", campusId) :
                new ObjectParameter("CampusId", typeof(int));
    
            var allowedStudyGroupIdsParameter = allowedStudyGroupIds != null ?
                new ObjectParameter("AllowedStudyGroupIds", allowedStudyGroupIds) :
                new ObjectParameter("AllowedStudyGroupIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LK_StudyGroup_GetListByParam_Result>("LK_StudyGroup_GetListByParam", dB_IF_PARAMParameter, companyIdParameter, campusIdParameter, allowedStudyGroupIdsParameter);
        }
    
        public virtual ObjectResult<LK_StudyLevel_GetListByParam_Result> LK_StudyLevel_GetListByParam(string dB_IF_PARAM, Nullable<int> companyId, Nullable<int> campusId, string allowedStudyLevelIds)
        {
            var dB_IF_PARAMParameter = dB_IF_PARAM != null ?
                new ObjectParameter("DB_IF_PARAM", dB_IF_PARAM) :
                new ObjectParameter("DB_IF_PARAM", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var campusIdParameter = campusId.HasValue ?
                new ObjectParameter("CampusId", campusId) :
                new ObjectParameter("CampusId", typeof(int));
    
            var allowedStudyLevelIdsParameter = allowedStudyLevelIds != null ?
                new ObjectParameter("AllowedStudyLevelIds", allowedStudyLevelIds) :
                new ObjectParameter("AllowedStudyLevelIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LK_StudyLevel_GetListByParam_Result>("LK_StudyLevel_GetListByParam", dB_IF_PARAMParameter, companyIdParameter, campusIdParameter, allowedStudyLevelIdsParameter);
        }
    
        public virtual ObjectResult<LK_WHTaxPolicy_GetListByParam_Result> LK_WHTaxPolicy_GetListByParam(string dB_IF_PARAM, Nullable<int> companyId, Nullable<int> branchId, Nullable<int> accFeeStructureId, Nullable<int> documentStatusFeeStructure)
        {
            var dB_IF_PARAMParameter = dB_IF_PARAM != null ?
                new ObjectParameter("DB_IF_PARAM", dB_IF_PARAM) :
                new ObjectParameter("DB_IF_PARAM", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var accFeeStructureIdParameter = accFeeStructureId.HasValue ?
                new ObjectParameter("AccFeeStructureId", accFeeStructureId) :
                new ObjectParameter("AccFeeStructureId", typeof(int));
    
            var documentStatusFeeStructureParameter = documentStatusFeeStructure.HasValue ?
                new ObjectParameter("DocumentStatusFeeStructure", documentStatusFeeStructure) :
                new ObjectParameter("DocumentStatusFeeStructure", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LK_WHTaxPolicy_GetListByParam_Result>("LK_WHTaxPolicy_GetListByParam", dB_IF_PARAMParameter, companyIdParameter, branchIdParameter, accFeeStructureIdParameter, documentStatusFeeStructureParameter);
        }
    
        public virtual ObjectResult<StructureCOAAccount_GetListByParam_Result> StructureCOAAccount_GetListByParam(Nullable<int> companyId, Nullable<int> branchId, string listCondition, string coaCatagoryIds)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var listConditionParameter = listCondition != null ?
                new ObjectParameter("ListCondition", listCondition) :
                new ObjectParameter("ListCondition", typeof(string));
    
            var coaCatagoryIdsParameter = coaCatagoryIds != null ?
                new ObjectParameter("CoaCatagoryIds", coaCatagoryIds) :
                new ObjectParameter("CoaCatagoryIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StructureCOAAccount_GetListByParam_Result>("StructureCOAAccount_GetListByParam", companyIdParameter, branchIdParameter, listConditionParameter, coaCatagoryIdsParameter);
        }
    
        public virtual ObjectResult<StructureDiscountType_GetListByParam_Result> StructureDiscountType_GetListByParam(string dB_IF_PARAM, Nullable<int> branchId, Nullable<int> companyId, Nullable<int> id)
        {
            var dB_IF_PARAMParameter = dB_IF_PARAM != null ?
                new ObjectParameter("DB_IF_PARAM", dB_IF_PARAM) :
                new ObjectParameter("DB_IF_PARAM", typeof(string));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StructureDiscountType_GetListByParam_Result>("StructureDiscountType_GetListByParam", dB_IF_PARAMParameter, branchIdParameter, companyIdParameter, idParameter);
        }
    
        public virtual ObjectResult<StructureDiscountType_GetListBySearch_Result> StructureDiscountType_GetListBySearch(Nullable<int> companyId, Nullable<int> branchId, Nullable<int> inputTypeId, string inputText)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var inputTypeIdParameter = inputTypeId.HasValue ?
                new ObjectParameter("InputTypeId", inputTypeId) :
                new ObjectParameter("InputTypeId", typeof(int));
    
            var inputTextParameter = inputText != null ?
                new ObjectParameter("InputText", inputText) :
                new ObjectParameter("InputText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StructureDiscountType_GetListBySearch_Result>("StructureDiscountType_GetListBySearch", companyIdParameter, branchIdParameter, inputTypeIdParameter, inputTextParameter);
        }
    
        public virtual int StructureDiscountType_Upsert(string dB_OperationType, Nullable<System.Guid> guID, string code, string description, string remarks, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, Nullable<System.DateTime> updatedOn, Nullable<int> updatedBy, Nullable<int> docType, Nullable<int> documentStatus, Nullable<bool> status, Nullable<int> branchId, Nullable<int> companyId, ObjectParameter response)
        {
            var dB_OperationTypeParameter = dB_OperationType != null ?
                new ObjectParameter("DB_OperationType", dB_OperationType) :
                new ObjectParameter("DB_OperationType", typeof(string));
    
            var guIDParameter = guID.HasValue ?
                new ObjectParameter("GuID", guID) :
                new ObjectParameter("GuID", typeof(System.Guid));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var docTypeParameter = docType.HasValue ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(int));
    
            var documentStatusParameter = documentStatus.HasValue ?
                new ObjectParameter("DocumentStatus", documentStatus) :
                new ObjectParameter("DocumentStatus", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StructureDiscountType_Upsert", dB_OperationTypeParameter, guIDParameter, codeParameter, descriptionParameter, remarksParameter, createdOnParameter, createdByParameter, updatedOnParameter, updatedByParameter, docTypeParameter, documentStatusParameter, statusParameter, branchIdParameter, companyIdParameter, response);
        }
    
        public virtual ObjectResult<StructureFeeType_GetListByParam_Result> StructureFeeType_GetListByParam(string dB_IF_PARAM, Nullable<int> companyId, Nullable<int> branchId)
        {
            var dB_IF_PARAMParameter = dB_IF_PARAM != null ?
                new ObjectParameter("DB_IF_PARAM", dB_IF_PARAM) :
                new ObjectParameter("DB_IF_PARAM", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StructureFeeType_GetListByParam_Result>("StructureFeeType_GetListByParam", dB_IF_PARAMParameter, companyIdParameter, branchIdParameter);
        }
    
        public virtual ObjectResult<StructureFeeType_GetListBySearch_Result> StructureFeeType_GetListBySearch(Nullable<int> companyId, Nullable<int> branchId, Nullable<int> inputTypeId, string inputText)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var inputTypeIdParameter = inputTypeId.HasValue ?
                new ObjectParameter("InputTypeId", inputTypeId) :
                new ObjectParameter("InputTypeId", typeof(int));
    
            var inputTextParameter = inputText != null ?
                new ObjectParameter("InputText", inputText) :
                new ObjectParameter("InputText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StructureFeeType_GetListBySearch_Result>("StructureFeeType_GetListBySearch", companyIdParameter, branchIdParameter, inputTypeIdParameter, inputTextParameter);
        }
    
        public virtual int StructureFeeType_UpSert(string dB_OperationType, Nullable<System.Guid> guID, Nullable<int> feeCatagoryId, Nullable<int> chargingMethodId, string description, Nullable<bool> isOnAdmission, Nullable<bool> isSecurity, Nullable<bool> isRefundable, Nullable<bool> isDiscount, Nullable<int> revenueAccountId, Nullable<int> assetAccountId, Nullable<int> liabilityAccountId, Nullable<int> costOfSaleAccountId, Nullable<System.DateTime> createdOn, Nullable<int> createdBy, Nullable<System.DateTime> updatedOn, Nullable<int> updatedBy, Nullable<int> docType, Nullable<int> documentStatus, Nullable<bool> status, Nullable<int> branchId, Nullable<int> companyId, ObjectParameter response)
        {
            var dB_OperationTypeParameter = dB_OperationType != null ?
                new ObjectParameter("DB_OperationType", dB_OperationType) :
                new ObjectParameter("DB_OperationType", typeof(string));
    
            var guIDParameter = guID.HasValue ?
                new ObjectParameter("GuID", guID) :
                new ObjectParameter("GuID", typeof(System.Guid));
    
            var feeCatagoryIdParameter = feeCatagoryId.HasValue ?
                new ObjectParameter("FeeCatagoryId", feeCatagoryId) :
                new ObjectParameter("FeeCatagoryId", typeof(int));
    
            var chargingMethodIdParameter = chargingMethodId.HasValue ?
                new ObjectParameter("ChargingMethodId", chargingMethodId) :
                new ObjectParameter("ChargingMethodId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isOnAdmissionParameter = isOnAdmission.HasValue ?
                new ObjectParameter("IsOnAdmission", isOnAdmission) :
                new ObjectParameter("IsOnAdmission", typeof(bool));
    
            var isSecurityParameter = isSecurity.HasValue ?
                new ObjectParameter("IsSecurity", isSecurity) :
                new ObjectParameter("IsSecurity", typeof(bool));
    
            var isRefundableParameter = isRefundable.HasValue ?
                new ObjectParameter("IsRefundable", isRefundable) :
                new ObjectParameter("IsRefundable", typeof(bool));
    
            var isDiscountParameter = isDiscount.HasValue ?
                new ObjectParameter("IsDiscount", isDiscount) :
                new ObjectParameter("IsDiscount", typeof(bool));
    
            var revenueAccountIdParameter = revenueAccountId.HasValue ?
                new ObjectParameter("RevenueAccountId", revenueAccountId) :
                new ObjectParameter("RevenueAccountId", typeof(int));
    
            var assetAccountIdParameter = assetAccountId.HasValue ?
                new ObjectParameter("AssetAccountId", assetAccountId) :
                new ObjectParameter("AssetAccountId", typeof(int));
    
            var liabilityAccountIdParameter = liabilityAccountId.HasValue ?
                new ObjectParameter("LiabilityAccountId", liabilityAccountId) :
                new ObjectParameter("LiabilityAccountId", typeof(int));
    
            var costOfSaleAccountIdParameter = costOfSaleAccountId.HasValue ?
                new ObjectParameter("CostOfSaleAccountId", costOfSaleAccountId) :
                new ObjectParameter("CostOfSaleAccountId", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var docTypeParameter = docType.HasValue ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(int));
    
            var documentStatusParameter = documentStatus.HasValue ?
                new ObjectParameter("DocumentStatus", documentStatus) :
                new ObjectParameter("DocumentStatus", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StructureFeeType_UpSert", dB_OperationTypeParameter, guIDParameter, feeCatagoryIdParameter, chargingMethodIdParameter, descriptionParameter, isOnAdmissionParameter, isSecurityParameter, isRefundableParameter, isDiscountParameter, revenueAccountIdParameter, assetAccountIdParameter, liabilityAccountIdParameter, costOfSaleAccountIdParameter, createdOnParameter, createdByParameter, updatedOnParameter, updatedByParameter, docTypeParameter, documentStatusParameter, statusParameter, branchIdParameter, companyIdParameter, response);
        }
    }
}
